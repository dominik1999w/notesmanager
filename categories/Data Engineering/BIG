#include <iostream>
#include <cstring>
using namespace std;
 
struct record {
    string number;
    int points;
    bool removed = 0;
    bool full = 0;
};
 
int z,n,points;
int hash_size, hash_size2, hash_fullness, hash_removed,just_found, ind;
string command,number;
record* hashh;
record* hash2;
const int primes[] = {47,109,211,409,911,1607,3121,6329,
    12613,24421,52291,103319,203459,407899,992801,2183749,3742793,7982773,11469043,15485863,20000311,30003037};
const unsigned int P = 692147;
const unsigned int Q = 213737;
 
unsigned int f(string num){
    unsigned int res = num[0];
    for(int i = 1; i < 8; i++){
        res = P * res + num[i];
    }
    return res % hash_size;
}
 
unsigned int g(string num){
    unsigned int res = num[0];
    for(int i = 1; i < 8; i++){
        res = Q * res + num[i];
    }
    return 1 + (res % (hash_size - 2));
}
 
int find(string num){
    int h = f(num);
    int hh = g(num);
    while(hashh[h].removed == 1 || hashh[h].full == 1){
        if(hashh[h].full == 1 && hashh[h].number == num){
            just_found = h;
            return h;
        }
        h  = (h + hh) % hash_size;
    }
    just_found = h;
    return -1;
}
 
void insert(){
    int h = find(number);
    if(h >= 0){
        hashh[just_found].points += points;
    } else {
        hashh[just_found].number = number;
        hashh[just_found].points = points;
        hashh[just_found].removed = 0;
        hashh[just_found].full = 1;
        hash_fullness ++;
    }
}
 
void remove(){
    int h = find(number);
    if(h == -1){
        cout << "ERROR" << endl;
    } else {
        hashh[h].removed = 1;
        hashh[h].full = 0;
        hash_removed ++;
        hash_fullness --;
        cout << number << " " << hashh[h].points << endl;
     }
}
 
int find_command(){
    int h = find(number);
    if(h == -1){
        return 0;
    } else {
        return hashh[h].points;
    }
}
 
void check(){
    //cout << "hr: " << hash_removed << " hf: " << hash_fullness << " hs: " << hash_size << endl;
    if(hash_fullness > hash_size / 2){
        ind ++;
        hash2 = hashh;
        hashh = new record[primes[ind]];
        hash_size2 = hash_size;
        hash_size = primes[ind];
        hash_removed = 0;
        hash_fullness = 0;
 
        for(int i = 0; i < hash_size2; i++){
            if(hash2[i].full == 1){
                number = hash2[i].number;
                points = hash2[i].points;
                insert();
            }
        }
        delete [] hash2;
    } else if(hash_removed > hash_size / 4){
        if(hash_fullness < hash_size / 4) ind = max(0, ind - 1);
        hash2 = hashh;
        hashh = new record[primes[ind]];
        hash_size2 = hash_size;
        hash_size = primes[ind];
        hash_removed = 0;
        hash_fullness = 0;
 
        for(int i = 0; i < hash_size2; i++){
            if(hash2[i].full == 1){
                number = hash2[i].number;
                points = hash2[i].points;
                insert();
            }
        }
        delete [] hash2;
    }
}
 
int main(){
    cin >> z;
    while(z--){
 
        hashh = new record[primes[0]];
        hash_size = primes[0];
        hash_removed = 0;
        hash_fullness = 0;
        ind = 0;
 
        cin >> n;
        while(n--){
            check();
            cin >> command;
            if(command == "INSERT"){
                cin >> number >> points;
                insert();
            } else if(command == "DELETE"){
                cin >> number;
                remove();
            } else if(command == "FIND"){
                cin >> number;
                cout << find_command() << endl;
            }
        }
        delete [] hashh;
    }
 
    return 0;
}
